@page "/admin/customers"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using DT191GProjektHotell.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavManager

<PageTitle>Kundregister - Dalsjöns Gårdshotell</PageTitle>

<div class="container my-5">
    <h1 class="text-center mb-4 h3">Kundregister</h1>

    <div class="mb-3 row g-2 justify-content-center">
        <div class="col-md-6">
            <label for="customerSearch" class="visually-hidden">Sök kunder</label>
            <input id="customerSearch" class="form-control" placeholder="Sök namn, e-post eller telefon..." @bind="CustomerSearch" />
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-success" @onclick="OpenAddCustomerDialog">
                <i class="bi bi-person-plus"></i> Lägg till kund
            </button>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Namn</th>
                            <th>E-post</th>
                            <th>Telefon</th>
                            <th>Bokningar</th>
                            <th>Åtgärder</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var customer in FilteredCustomers)
                        {
                            <tr>
                                <td>@customer.FirstName @customer.LastName</td>
                                <td>@customer.Email</td>
                                <td>@customer.PhoneNumber</td>
                                <td>@(customer.Bookings?.Count() ?? 0)</td>
                                <td>
                                    <button class="btn btn-sm btn-warning me-1" @onclick="() => ShowCustomerBookings(customer)">
                                        <i class="bi bi-calendar2-week"></i> Bokningar
                                    </button>
                                    <button class="btn btn-sm btn-primary me-1" @onclick="() => OpenEditCustomerDialog(customer)">
                                        <i class="bi bi-pencil"></i> Redigera
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteCustomer(customer.CustomerId)">
                                        <i class="bi bi-trash"></i> Ta bort
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    @* Modal för lägg till/redigera kund *@
    @if (ShowCustomerDialog)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@((EditCustomerId == 0) ? "Lägg till kund" : "Redigera kund")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCustomerDialog"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="CustomerVM" OnValidSubmit="SaveCustomer">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-2">
                                <label for="firstName" class="form-label">Förnamn</label>
                                <InputText id="firstName" class="form-control" @bind-Value="CustomerVM.FirstName" />
                            </div>
                            <div class="mb-2">
                                <label for="lastName" class="form-label">Efternamn</label>
                                <InputText id="lastName" class="form-control" @bind-Value="CustomerVM.LastName" />
                            </div>
                            <div class="mb-2">
                                <label for="customerEmail" class="form-label">E-post</label>
                                <InputText id="customerEmail" class="form-control" @bind-Value="CustomerVM.Email" />
                            </div>
                            <div class="mb-2">
                                <label for="phoneNumber" class="form-label">Telefon</label>
                                <InputText id="phoneNumber" class="form-control" @bind-Value="CustomerVM.PhoneNumber" />
                            </div>
                            <button type="submit" class="btn btn-success">Spara</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="CloseCustomerDialog">Avbryt</button>
                        </EditForm>
                        @if (!string.IsNullOrEmpty(CustomerDialogError))
                        {
                            <div class="alert alert-danger mt-2">@CustomerDialogError</div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @* Bekräftelsedialog för borttagning *@
    @if (showDeleteConfirmation && customerToDelete != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="fa-solid fa-exclamation-triangle text-warning me-2" aria-hidden="true"></i>
                            Bekräfta borttagning
                        </h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            Är du säker på att du vill ta bort kunden
                            <strong>@customerToDelete.FirstName @customerToDelete.LastName</strong>?
                        </p>
                        <div class="alert alert-warning" role="alert">
                            <i class="fa-solid fa-info-circle me-2" aria-hidden="true"></i>
                            <strong>Varning:</strong> Denna åtgärd kan inte ångras.
                            Alla bokningar kopplade till denna kund kommer att påverkas.
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                            <i class="fa-solid fa-trash me-1" aria-hidden="true"></i>
                            Ta bort kund
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">
                            <i class="fa-solid fa-times me-1" aria-hidden="true"></i>
                            Avbryt
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Modal för kundtbokningar *@
    @if (ShowBookingsModal && SelectedCustomer != null)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Bokningar för @SelectedCustomer.FirstName @SelectedCustomer.LastName</h5>
                        <button type="button" class="btn-close" @onclick="CloseBookingsModal"></button>
                    </div>
                    <div class="modal-body">
                        @if (SelectedCustomer.Bookings != null && SelectedCustomer.Bookings.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Boknings-ID</th>
                                            <th>Rum</th>
                                            <th>Check-in</th>
                                            <th>Check-out</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var booking in SelectedCustomer.Bookings.OrderByDescending(b => b.CheckInDate))
                                        {
                                            <tr>
                                                <td>@booking.BookingId</td>
                                                <td>@booking.Room?.RoomType</td>
                                                <td>@booking.CheckInDate.ToShortDateString()</td>
                                                <td>@booking.CheckOutDate.ToShortDateString()</td>
                                                <td>
                                                    @if (booking.Status == "Bekräftad")
                                                    {
                                                        <span class="badge bg-warning text-dark">Ej incheckad</span>
                                                    }
                                                    else if (booking.Status == "Incheckad")
                                                    {
                                                        <span class="badge bg-success">Incheckad</span>
                                                    }
                                                    else if (booking.Status == "Avbokad")
                                                    {
                                                        <span class="badge bg-danger">Avbokad</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">@booking.Status</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-muted">Inga bokningar hittades för denna kund.</div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <div class="d-flex justify-content-center mt-4">
        <button class="btn btn-custom" @onclick="GoBack">
            <i class="fa-solid fa-arrow-left"></i> Tillbaka
        </button>
    </div>
</div>

@code {
    private List<CustomerModel> Customers = new();
    private string CustomerSearch = "";
    private bool ShowCustomerDialog = false;
    private int EditCustomerId = 0;
    private CustomerModel CustomerVM = new();
    private string CustomerDialogError = "";
    private bool ShowBookingsModal = false;
    private CustomerModel? SelectedCustomer;
    private bool showDeleteConfirmation = false;
    private CustomerModel? customerToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        using var context = DbFactory.CreateDbContext();
        Customers = await context.Customers.Include(c => c.Bookings).ThenInclude(b => b.Room).ToListAsync();
    }

    private IEnumerable<CustomerModel> FilteredCustomers =>
        Customers.Where(c =>
            string.IsNullOrWhiteSpace(CustomerSearch) ||
            (c.FirstName + " " + c.LastName + " " + c.Email + " " + c.PhoneNumber)
                .ToLower().Contains(CustomerSearch.ToLower()));

    private void OpenAddCustomerDialog()
    {
        EditCustomerId = 0;
        CustomerVM = new CustomerModel();
        CustomerDialogError = "";
        ShowCustomerDialog = true;
    }

    private void OpenEditCustomerDialog(CustomerModel customer)
    {
        EditCustomerId = customer.CustomerId;
        CustomerVM = new CustomerModel
        {
            CustomerId = customer.CustomerId,
            FirstName = customer.FirstName,
            LastName = customer.LastName,
            Email = customer.Email,
            PhoneNumber = customer.PhoneNumber
        };
        CustomerDialogError = "";
        ShowCustomerDialog = true;
    }

    private void CloseCustomerDialog()
    {
        ShowCustomerDialog = false;
        CustomerDialogError = "";
    }

    private async Task SaveCustomer()
    {
        using var context = DbFactory.CreateDbContext();

        if (string.IsNullOrWhiteSpace(CustomerVM.FirstName) ||
            string.IsNullOrWhiteSpace(CustomerVM.LastName) ||
            string.IsNullOrWhiteSpace(CustomerVM.Email) ||
            string.IsNullOrWhiteSpace(CustomerVM.PhoneNumber))
        {
            CustomerDialogError = "Alla fält måste fyllas i.";
            return;
        }

        try
        {
            if (EditCustomerId == 0)
            {
                context.Customers.Add(CustomerVM);
            }
            else
            {
                var customer = await context.Customers.FindAsync(EditCustomerId);
                if (customer == null)
                {
                    CustomerDialogError = "Kunden kunde inte hittas.";
                    return;
                }
                customer.FirstName = CustomerVM.FirstName;
                customer.LastName = CustomerVM.LastName;
                customer.Email = CustomerVM.Email;
                customer.PhoneNumber = CustomerVM.PhoneNumber;
            }

            await context.SaveChangesAsync();
            ShowCustomerDialog = false;
            await LoadCustomers();
        }
        catch (Exception)
        {
            CustomerDialogError = "Ett fel uppstod när kunden skulle sparas.";
        }
    }

    private void ConfirmDeleteCustomer(int customerId)
    {
        customerToDelete = Customers.FirstOrDefault(c => c.CustomerId == customerId);
        if (customerToDelete != null)
        {
            showDeleteConfirmation = true;
        }
    }

    private async Task ConfirmDelete()
    {
        if (customerToDelete != null)
        {
            try
            {
                using var context = DbFactory.CreateDbContext();
                var customer = await context.Customers.FindAsync(customerToDelete.CustomerId);
                if (customer != null)
                {
                    context.Customers.Remove(customer);
                    await context.SaveChangesAsync();
                    await LoadCustomers();
                }
            }
            catch (Exception)
            {
                CustomerDialogError = "Ett fel uppstod när kunden skulle tas bort.";
            }
        }

        showDeleteConfirmation = false;
        customerToDelete = null;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        customerToDelete = null;
    }

    private void ShowCustomerBookings(CustomerModel customer)
    {
        using var context = DbFactory.CreateDbContext();
        SelectedCustomer = context.Customers
            .Include(c => c.Bookings)
            .ThenInclude(b => b.Room)
            .FirstOrDefault(c => c.CustomerId == customer.CustomerId);

        ShowBookingsModal = true;
    }

    private void CloseBookingsModal()
    {
        ShowBookingsModal = false;
        SelectedCustomer = null;
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/admin/main");
    }
}